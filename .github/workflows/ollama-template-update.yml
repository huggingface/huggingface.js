name: Ollama template update
on:
  # push: # for debugging
  workflow_dispatch:
  schedule:
    - cron: "0 7 * * 1" # every monday at 7am, so I'll review it after having a 🥐

permissions:
  pull-requests: write # for creating PR
  issues: write # for adding labels to the created PR
  contents: write # for git push new branch

jobs:
  update-ollama-templates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        if: github.repository == 'huggingface/huggingface.js'

      - name: Prepare
        id: prepare
        if: github.repository == 'huggingface/huggingface.js'
        shell: bash
        run: |
          git config --global user.name machineuser
          git config --global user.email infra+machineuser@huggingface.co
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          npm install -g pnpm
          CURRENT_DATE=$(date -u +"%Y-%m-%d")
          echo "CURRENT_DATE=$CURRENT_DATE"
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT

      - name: Install dependencies
        if: github.repository == 'huggingface/huggingface.js'
        shell: bash
        run: |
          cd packages/ollama-utils
          pnpm install --frozen-lockfile

      - name: Run update script
        if: github.repository == 'huggingface/huggingface.js'
        shell: bash
        run: |
          cd packages/ollama-utils
          pnpm run build:automap

      - name: Check for changed files
        id: changes
        if: github.repository == 'huggingface/huggingface.js'
        uses: actions/github-script@v6
        env:
          CURRENT_DATE: ${{ steps.prepare.outputs.CURRENT_DATE }}
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');

            const FILE_TO_ADD = "packages/ollama-utils/src/chat-template-automap.ts";
            const CURRENT_DATE = process.env.CURRENT_DATE;

            // Check git status
            const gitStatus = execSync('git status -s', { encoding: 'utf8' }).trim();
            console.log('Modified files:', gitStatus);

            if (!gitStatus) {
              console.log('No files changed, skipping...');
              core.setOutput('HAS_CHANGES', 'false');
              return;
            }

            // Check if changes are only in the target file
            const changedFiles = execSync('git diff --name-only', { encoding: 'utf8' }).trim().split('\n').filter(f => f);
            console.log('Changed files:', changedFiles);

            let shouldCreatePR = true;

            if (changedFiles.length === 1 && changedFiles[0] === FILE_TO_ADD) {
              console.log('Checking if only comment changed...');
              
              // Get the diff output
              const diffOutput = execSync(`git diff "${FILE_TO_ADD}"`, { encoding: 'utf8' });
              console.log('Diff output:');
              console.log(diffOutput);
              
              // Check if all changes are within the "Skipped these models due to error:" comment block
              const diffLines = diffOutput.split('\n');
              const changedLines = diffLines.filter(line => line.startsWith('+') || line.startsWith('-'));
              
              // Filter out lines that are part of the skipped models comment
              const significantChanges = changedLines.filter(line => {
                // Skip lines that are just adding/removing skipped model entries
                if (line.match(/^[+-]\s*\*\s*-\s*library\//)) return false;
                // Skip empty comment lines or lines with just *
                if (line.match(/^[+-]\s*\*?\s*$/)) return false;
                return true;
              });
              
              if (significantChanges.length === 0) {
                console.log('Only skipped models comment changed, skipping PR creation');
                shouldCreatePR = false;
              } else {
                console.log('Changes found outside of skipped models comment, will create PR');
                console.log('Significant changes:', significantChanges);
              }
            } else {
              console.log('Multiple files changed or other files changed, will create PR');
            }

            if (shouldCreatePR) {
              const newBranch = `ollama-${CURRENT_DATE}`;
              console.log('NEW_BRANCH:', newBranch);
              console.log('Changes detected, will create a new branch');
              
              // Git operations
              execSync(`git add "${FILE_TO_ADD}"`);
              execSync(`git commit -m "ollama update ${CURRENT_DATE}"`);
              execSync(`git checkout -b "${newBranch}"`);
              execSync(`git push -f origin "${newBranch}"`);
              
              core.setOutput('HAS_CHANGES', 'true');
              core.setOutput('NEW_BRANCH', newBranch);
            } else {
              console.log('Only comment changes detected, skipping PR creation...');
              core.setOutput('HAS_CHANGES', 'false');
            }

      - name: Create PR
        if: steps.changes.outputs.HAS_CHANGES == 'true' && github.repository == 'huggingface/huggingface.js'
        uses: actions/github-script@v6
        env:
          CURRENT_DATE: ${{ steps.prepare.outputs.CURRENT_DATE }}
          NEW_BRANCH: ${{ steps.changes.outputs.NEW_BRANCH }}
        with:
          github-token: ${{ secrets.HUGGINGFACE_JS_AUTOMATIC_PR }}
          script: |
            const { repo, owner } = context.repo;
            const currDate = process.env.CURRENT_DATE;
            const newBranch = process.env.NEW_BRANCH;

            const result = await github.rest.pulls.create({
              title: '[ollama-utils] 🤖 Auto-update chat templates (' + currDate + ')',
              owner,
              repo,
              head: newBranch,
              base: 'main',
              body: [
                'This PR is auto-generated by',
                '[generate-automap.ts](https://github.com/huggingface/huggingface.js/blob/main/packages/ollama-utils/scripts/generate-automap.ts).'
              ].join('\n')
            });

            console.log({ result });
            // github.rest.issues.addLabels({
            //   owner,
            //   repo,
            //   issue_number: result.data.number,
            //   labels: ['feature', 'automated pr']
            // });
