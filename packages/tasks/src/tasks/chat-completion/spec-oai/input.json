{
	"$id": "/inference/schemas/chat-completion/input.json",
	"$schema": "http://json-schema.org/draft-06/schema#",
	"description": "Chat Completion Input.\n\nAuto-generated from OAI specs.\nFor more details, check out https://github.com/huggingface/huggingface.js/blob/main/packages/tasks/scripts/inference-oai-import.ts.",
	"title": "ChatCompletionInput",
	"type": "object",
	"required": ["model", "messages"],
	"properties": {
		"messages": {
			"description": "A list of messages comprising the conversation so far. Depending on the\n[model](/docs/models) you use, different message types (modalities) are\nsupported, like [text](/docs/guides/text-generation),\n[images](/docs/guides/vision), and [audio](/docs/guides/audio).\n",
			"type": "array",
			"minItems": 1,
			"items": {
				"$ref": "#/$defs/ChatCompletionInputRequestMessage"
			}
		},
		"model": {
			"description": "Model ID used to generate the response, like `gpt-4o` or `o1`. OpenAI\noffers a wide range of models with different capabilities, performance\ncharacteristics, and price points. Refer to the [model guide](/docs/models)\nto browse and compare available models.\n",
			"$ref": "#/$defs/ChatCompletionInputModelIdsShared"
		},
		"modalities": {
			"$ref": "#/$defs/ChatCompletionInputResponseModalities"
		},
		"reasoning_effort": {
			"$ref": "#/$defs/ChatCompletionInputReasoningEffort"
		},
		"max_completion_tokens": {
			"description": "An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).\n",
			"type": "integer",
			"nullable": true
		},
		"frequency_penalty": {
			"type": "number",
			"default": 0,
			"minimum": -2,
			"maximum": 2,
			"nullable": true,
			"description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on\ntheir existing frequency in the text so far, decreasing the model's\nlikelihood to repeat the same line verbatim.\n"
		},
		"presence_penalty": {
			"type": "number",
			"default": 0,
			"minimum": -2,
			"maximum": 2,
			"nullable": true,
			"description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on\nwhether they appear in the text so far, increasing the model's likelihood\nto talk about new topics.\n"
		},
		"web_search_options": {
			"type": "object",
			"title": "Web search",
			"description": "This tool searches the web for relevant results to use in a response.\nLearn more about the [web search tool](/docs/guides/tools-web-search?api-mode=chat).\n",
			"properties": {
				"user_location": {
					"type": "object",
					"nullable": true,
					"required": ["type", "approximate"],
					"description": "Approximate location parameters for the search.\n",
					"properties": {
						"type": {
							"type": "string",
							"description": "The type of location approximation. Always `approximate`.\n",
							"enum": ["approximate"],
							"x-stainless-const": true
						},
						"approximate": {
							"$ref": "#/$defs/ChatCompletionInputWebSearchLocation"
						}
					},
					"title": "ChatCompletionInputUserLocation"
				},
				"search_context_size": {
					"$ref": "#/$defs/ChatCompletionInputWebSearchContextSize"
				}
			}
		},
		"top_logprobs": {
			"description": "An integer between 0 and 20 specifying the number of most likely tokens to\nreturn at each token position, each with an associated log probability.\n`logprobs` must be set to `true` if this parameter is used.\n",
			"type": "integer",
			"minimum": 0,
			"maximum": 20,
			"nullable": true
		},
		"response_format": {
			"description": "An object specifying the format that the model must output.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables\nStructured Outputs which ensures the model will match your supplied JSON\nschema. Learn more in the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it.\n",
			"oneOf": [
				{
					"$ref": "#/$defs/ChatCompletionInputResponseFormatText"
				},
				{
					"$ref": "#/$defs/ChatCompletionInputResponseFormatJsonSchema"
				},
				{
					"$ref": "#/$defs/ChatCompletionInputResponseFormatJsonObject"
				}
			],
			"x-oaiExpandable": true
		},
		"service_tier": {
			"description": "Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:\n  - If set to 'auto', and the Project is Scale tier enabled, the system\n    will utilize scale tier credits until they are exhausted.\n  - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.\n  - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.\n  - When not set, the default behavior is 'auto'.\n\n  When this parameter is set, the response body will include the `service_tier` utilized.\n",
			"type": "string",
			"enum": ["auto", "default"],
			"nullable": true,
			"default": "auto"
		},
		"audio": {
			"type": "object",
			"nullable": true,
			"description": "Parameters for audio output. Required when audio output is requested with\n`modalities: [\"audio\"]`. [Learn more](/docs/guides/audio).\n",
			"required": ["voice", "format"],
			"x-oaiExpandable": true,
			"properties": {
				"voice": {
					"$ref": "#/$defs/ChatCompletionInputVoiceIdsShared",
					"description": "The voice the model uses to respond. Supported voices are \n`alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`, and `shimmer`.\n"
				},
				"format": {
					"type": "string",
					"enum": ["wav", "mp3", "flac", "opus", "pcm16"],
					"description": "Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,\n`opus`, or `pcm16`.\n"
				}
			},
			"title": "ChatCompletionInputAudio"
		},
		"store": {
			"type": "boolean",
			"default": false,
			"nullable": true,
			"description": "Whether or not to store the output of this chat completion request for \nuse in our [model distillation](/docs/guides/distillation) or\n[evals](/docs/guides/evals) products.\n"
		},
		"stream": {
			"description": "If set to true, the model response data will be streamed to the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\nSee the [Streaming section below](/docs/api-reference/chat/streaming)\nfor more information, along with the [streaming responses](/docs/guides/streaming-responses)\nguide for more information on how to handle the streaming events.\n",
			"type": "boolean",
			"nullable": true,
			"default": false
		},
		"stop": {
			"$ref": "#/$defs/ChatCompletionInputStopConfiguration"
		},
		"logit_bias": {
			"type": "object",
			"x-oaiTypeLabel": "map",
			"default": null,
			"nullable": true,
			"additionalProperties": {
				"type": "integer"
			},
			"description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the\ntokenizer) to an associated bias value from -100 to 100. Mathematically,\nthe bias is added to the logits generated by the model prior to sampling.\nThe exact effect will vary per model, but values between -1 and 1 should\ndecrease or increase likelihood of selection; values like -100 or 100\nshould result in a ban or exclusive selection of the relevant token.\n",
			"title": "ChatCompletionInputLogitBias"
		},
		"logprobs": {
			"description": "Whether to return log probabilities of the output tokens or not. If true,\nreturns the log probabilities of each output token returned in the\n`content` of `message`.\n",
			"type": "boolean",
			"default": false,
			"nullable": true
		},
		"max_tokens": {
			"description": "The maximum number of [tokens](/tokenizer) that can be generated in the\nchat completion. This value can be used to control\n[costs](https://openai.com/api/pricing/) for text generated via API.\n\nThis value is now deprecated in favor of `max_completion_tokens`, and is\nnot compatible with [o1 series models](/docs/guides/reasoning).\n",
			"type": "integer",
			"nullable": true,
			"deprecated": true
		},
		"n": {
			"type": "integer",
			"minimum": 1,
			"maximum": 128,
			"default": 1,
			"example": 1,
			"nullable": true,
			"description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs."
		},
		"prediction": {
			"nullable": true,
			"x-oaiExpandable": true,
			"description": "Configuration for a [Predicted Output](/docs/guides/predicted-outputs),\nwhich can greatly improve response times when large parts of the model\nresponse are known ahead of time. This is most common when you are\nregenerating a file with only minor changes to most of the content.\n",
			"oneOf": [
				{
					"$ref": "#/$defs/ChatCompletionInputPredictionContent"
				}
			]
		},
		"seed": {
			"type": "integer",
			"format": "int64",
			"nullable": true,
			"description": "This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n",
			"x-oaiMeta": {
				"beta": true
			}
		},
		"stream_options": {
			"$ref": "#/$defs/ChatCompletionInputStreamOptions"
		},
		"tools": {
			"type": "array",
			"description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n",
			"items": {
				"$ref": "#/$defs/ChatCompletionInputTool"
			}
		},
		"tool_choice": {
			"$ref": "#/$defs/ChatCompletionInputToolChoiceOption"
		},
		"parallel_tool_calls": {
			"$ref": "#/$defs/ChatCompletionInputParallelToolCalls"
		},
		"function_call": {
			"deprecated": true,
			"description": "Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model.\n\n`none` means the model will not call a function and instead generates a\nmessage.\n\n`auto` means the model can pick between generating a message or calling a\nfunction.\n\nSpecifying a particular function via `{\"name\": \"my_function\"}` forces the\nmodel to call that function.\n\n`none` is the default when no functions are present. `auto` is the default\nif functions are present.\n",
			"oneOf": [
				{
					"type": "string",
					"description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n",
					"enum": ["none", "auto"]
				},
				{
					"$ref": "#/$defs/ChatCompletionInputFunctionCallOption"
				}
			],
			"x-oaiExpandable": true
		},
		"functions": {
			"deprecated": true,
			"description": "Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.\n",
			"type": "array",
			"minItems": 1,
			"maxItems": 128,
			"items": {
				"$ref": "#/$defs/ChatCompletionInputFunctions"
			}
		}
	},
	"$defs": {
		"ChatCompletionInputRequestMessage": {
			"oneOf": [
				{
					"$ref": "#/$defs/ChatCompletionInputRequestDeveloperMessage"
				},
				{
					"$ref": "#/$defs/ChatCompletionInputRequestSystemMessage"
				},
				{
					"$ref": "#/$defs/ChatCompletionInputRequestUserMessage"
				},
				{
					"$ref": "#/$defs/ChatCompletionInputRequestAssistantMessage"
				},
				{
					"$ref": "#/$defs/ChatCompletionInputRequestToolMessage"
				},
				{
					"$ref": "#/$defs/ChatCompletionInputRequestFunctionMessage"
				}
			],
			"x-oaiExpandable": true,
			"title": "ChatCompletionInputRequestMessage"
		},
		"ChatCompletionInputRequestDeveloperMessage": {
			"type": "object",
			"title": "ChatCompletionInputRequestDeveloperMessage",
			"description": "Developer-provided instructions that the model should follow, regardless of\nmessages sent by the user. With o1 models and newer, `developer` messages\nreplace the previous `system` messages.\n",
			"properties": {
				"content": {
					"description": "The contents of the developer message.",
					"oneOf": [
						{
							"type": "string",
							"description": "The contents of the developer message.",
							"title": "Text content"
						},
						{
							"type": "array",
							"description": "An array of content parts with a defined type. For developer messages, only type `text` is supported.",
							"title": "Array of content parts",
							"items": {
								"$ref": "#/$defs/ChatCompletionInputRequestMessageContentPartText"
							},
							"minItems": 1
						}
					]
				},
				"role": {
					"type": "string",
					"enum": ["developer"],
					"description": "The role of the messages author, in this case `developer`.",
					"x-stainless-const": true
				},
				"name": {
					"type": "string",
					"description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
				}
			},
			"required": ["content", "role"]
		},
		"ChatCompletionInputRequestMessageContentPartText": {
			"type": "object",
			"title": "ChatCompletionInputRequestMessageContentPartText",
			"description": "Learn about [text inputs](/docs/guides/text-generation).\n",
			"properties": {
				"type": {
					"type": "string",
					"enum": ["text"],
					"description": "The type of the content part.",
					"x-stainless-const": true
				},
				"text": {
					"type": "string",
					"description": "The text content."
				}
			},
			"required": ["type", "text"]
		},
		"ChatCompletionInputRequestSystemMessage": {
			"type": "object",
			"title": "ChatCompletionInputRequestSystemMessage",
			"description": "Developer-provided instructions that the model should follow, regardless of\nmessages sent by the user. With o1 models and newer, use `developer` messages\nfor this purpose instead.\n",
			"properties": {
				"content": {
					"description": "The contents of the system message.",
					"oneOf": [
						{
							"type": "string",
							"description": "The contents of the system message.",
							"title": "Text content"
						},
						{
							"type": "array",
							"description": "An array of content parts with a defined type. For system messages, only type `text` is supported.",
							"title": "Array of content parts",
							"items": {
								"$ref": "#/$defs/ChatCompletionInputRequestSystemMessageContentPart"
							},
							"minItems": 1
						}
					]
				},
				"role": {
					"type": "string",
					"enum": ["system"],
					"description": "The role of the messages author, in this case `system`.",
					"x-stainless-const": true
				},
				"name": {
					"type": "string",
					"description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
				}
			},
			"required": ["content", "role"]
		},
		"ChatCompletionInputRequestSystemMessageContentPart": {
			"oneOf": [
				{
					"$ref": "#/$defs/ChatCompletionInputRequestMessageContentPartText"
				}
			],
			"x-oaiExpandable": true,
			"title": "ChatCompletionInputRequestSystemMessageContentPart"
		},
		"ChatCompletionInputRequestUserMessage": {
			"type": "object",
			"title": "ChatCompletionInputRequestUserMessage",
			"description": "Messages sent by an end user, containing prompts or additional context\ninformation.\n",
			"properties": {
				"content": {
					"description": "The contents of the user message.\n",
					"oneOf": [
						{
							"type": "string",
							"description": "The text contents of the message.",
							"title": "Text content"
						},
						{
							"type": "array",
							"description": "An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text, image, or audio inputs.",
							"title": "Array of content parts",
							"items": {
								"$ref": "#/$defs/ChatCompletionInputRequestUserMessageContentPart"
							},
							"minItems": 1
						}
					],
					"x-oaiExpandable": true
				},
				"role": {
					"type": "string",
					"enum": ["user"],
					"description": "The role of the messages author, in this case `user`.",
					"x-stainless-const": true
				},
				"name": {
					"type": "string",
					"description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
				}
			},
			"required": ["content", "role"]
		},
		"ChatCompletionInputRequestUserMessageContentPart": {
			"oneOf": [
				{
					"$ref": "#/$defs/ChatCompletionInputRequestMessageContentPartText"
				},
				{
					"$ref": "#/$defs/ChatCompletionInputRequestMessageContentPartImage"
				},
				{
					"$ref": "#/$defs/ChatCompletionInputRequestMessageContentPartAudio"
				},
				{
					"$ref": "#/$defs/ChatCompletionInputRequestMessageContentPartFile"
				}
			],
			"x-oaiExpandable": true,
			"title": "ChatCompletionInputRequestUserMessageContentPart"
		},
		"ChatCompletionInputRequestMessageContentPartImage": {
			"type": "object",
			"title": "ChatCompletionInputRequestMessageContentPartImage",
			"description": "Learn about [image inputs](/docs/guides/vision).\n",
			"properties": {
				"type": {
					"type": "string",
					"enum": ["image_url"],
					"description": "The type of the content part.",
					"x-stainless-const": true
				},
				"image_url": {
					"type": "object",
					"properties": {
						"url": {
							"type": "string",
							"description": "Either a URL of the image or the base64 encoded image data.",
							"format": "uri"
						},
						"detail": {
							"type": "string",
							"description": "Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).",
							"enum": ["auto", "low", "high"],
							"default": "auto"
						}
					},
					"required": ["url"],
					"title": "ChatCompletionInputRequestMessageContentPartImageImageUrl"
				}
			},
			"required": ["type", "image_url"]
		},
		"ChatCompletionInputRequestMessageContentPartAudio": {
			"type": "object",
			"title": "ChatCompletionInputRequestMessageContentPartAudio",
			"description": "Learn about [audio inputs](/docs/guides/audio).\n",
			"properties": {
				"type": {
					"type": "string",
					"enum": ["input_audio"],
					"description": "The type of the content part. Always `input_audio`.",
					"x-stainless-const": true
				},
				"input_audio": {
					"type": "object",
					"properties": {
						"data": {
							"type": "string",
							"description": "Base64 encoded audio data."
						},
						"format": {
							"type": "string",
							"enum": ["wav", "mp3"],
							"description": "The format of the encoded audio data. Currently supports \"wav\" and \"mp3\".\n"
						}
					},
					"required": ["data", "format"],
					"title": "ChatCompletionInputRequestMessageContentPartAudioInputAudio"
				}
			},
			"required": ["type", "input_audio"]
		},
		"ChatCompletionInputRequestMessageContentPartFile": {
			"type": "object",
			"title": "ChatCompletionInputRequestMessageContentPartFile",
			"description": "Learn about [file inputs](/docs/guides/text) for text generation.\n",
			"properties": {
				"type": {
					"type": "string",
					"enum": ["file"],
					"description": "The type of the content part. Always `file`.",
					"x-stainless-const": true
				},
				"file": {
					"type": "object",
					"properties": {
						"filename": {
							"type": "string",
							"description": "The name of the file, used when passing the file to the model as a \nstring.\n"
						},
						"file_data": {
							"type": "string",
							"description": "The base64 encoded file data, used when passing the file to the model \nas a string.\n"
						},
						"file_id": {
							"type": "string",
							"description": "The ID of an uploaded file to use as input.\n"
						}
					},
					"title": "ChatCompletionInputRequestMessageContentPartFileFile"
				}
			},
			"required": ["type", "file"]
		},
		"ChatCompletionInputRequestAssistantMessage": {
			"type": "object",
			"title": "ChatCompletionInputRequestAssistantMessage",
			"description": "Messages sent by the model in response to user messages.\n",
			"properties": {
				"content": {
					"x-oaiExpandable": true,
					"nullable": true,
					"oneOf": [
						{
							"type": "string",
							"description": "The contents of the assistant message.",
							"title": "Text content"
						},
						{
							"type": "array",
							"description": "An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.",
							"title": "Array of content parts",
							"items": {
								"$ref": "#/$defs/ChatCompletionInputRequestAssistantMessageContentPart"
							},
							"minItems": 1
						}
					],
					"description": "The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.\n"
				},
				"refusal": {
					"nullable": true,
					"type": "string",
					"description": "The refusal message by the assistant."
				},
				"role": {
					"type": "string",
					"enum": ["assistant"],
					"description": "The role of the messages author, in this case `assistant`.",
					"x-stainless-const": true
				},
				"name": {
					"type": "string",
					"description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
				},
				"audio": {
					"type": "object",
					"nullable": true,
					"x-oaiExpandable": true,
					"description": "Data about a previous audio response from the model. \n[Learn more](/docs/guides/audio).\n",
					"required": ["id"],
					"properties": {
						"id": {
							"type": "string",
							"description": "Unique identifier for a previous audio response from the model.\n"
						}
					},
					"title": "ChatCompletionInputRequestAssistantMessageAudio"
				},
				"tool_calls": {
					"$ref": "#/$defs/ChatCompletionInputMessageToolCalls"
				},
				"function_call": {
					"type": "object",
					"deprecated": true,
					"description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
					"nullable": true,
					"properties": {
						"arguments": {
							"type": "string",
							"description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
						},
						"name": {
							"type": "string",
							"description": "The name of the function to call."
						}
					},
					"required": ["arguments", "name"],
					"title": "ChatCompletionInputRequestAssistantMessageFunctionCall"
				}
			},
			"required": ["role"]
		},
		"ChatCompletionInputRequestAssistantMessageContentPart": {
			"oneOf": [
				{
					"$ref": "#/$defs/ChatCompletionInputRequestMessageContentPartText"
				},
				{
					"$ref": "#/$defs/ChatCompletionInputRequestMessageContentPartRefusal"
				}
			],
			"x-oaiExpandable": true,
			"title": "ChatCompletionInputRequestAssistantMessageContentPart"
		},
		"ChatCompletionInputRequestMessageContentPartRefusal": {
			"type": "object",
			"title": "ChatCompletionInputRequestMessageContentPartRefusal",
			"properties": {
				"type": {
					"type": "string",
					"enum": ["refusal"],
					"description": "The type of the content part.",
					"x-stainless-const": true
				},
				"refusal": {
					"type": "string",
					"description": "The refusal message generated by the model."
				}
			},
			"required": ["type", "refusal"]
		},
		"ChatCompletionInputMessageToolCalls": {
			"type": "array",
			"description": "The tool calls generated by the model, such as function calls.",
			"items": {
				"$ref": "#/$defs/ChatCompletionInputMessageToolCall"
			},
			"title": "ChatCompletionInputMessageToolCalls"
		},
		"ChatCompletionInputMessageToolCall": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"description": "The ID of the tool call."
				},
				"type": {
					"type": "string",
					"enum": ["function"],
					"description": "The type of the tool. Currently, only `function` is supported.",
					"x-stainless-const": true
				},
				"function": {
					"type": "object",
					"description": "The function that the model called.",
					"properties": {
						"name": {
							"type": "string",
							"description": "The name of the function to call."
						},
						"arguments": {
							"type": "string",
							"description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
						}
					},
					"required": ["name", "arguments"],
					"title": "ChatCompletionInputMessageToolCallFunction"
				}
			},
			"required": ["id", "type", "function"],
			"title": "ChatCompletionInputMessageToolCall"
		},
		"ChatCompletionInputRequestToolMessage": {
			"type": "object",
			"title": "ChatCompletionInputRequestToolMessage",
			"properties": {
				"role": {
					"type": "string",
					"enum": ["tool"],
					"description": "The role of the messages author, in this case `tool`.",
					"x-stainless-const": true
				},
				"content": {
					"oneOf": [
						{
							"type": "string",
							"description": "The contents of the tool message.",
							"title": "Text content"
						},
						{
							"type": "array",
							"description": "An array of content parts with a defined type. For tool messages, only type `text` is supported.",
							"title": "Array of content parts",
							"items": {
								"$ref": "#/$defs/ChatCompletionInputRequestToolMessageContentPart"
							},
							"minItems": 1
						}
					],
					"description": "The contents of the tool message."
				},
				"tool_call_id": {
					"type": "string",
					"description": "Tool call that this message is responding to."
				}
			},
			"required": ["role", "content", "tool_call_id"]
		},
		"ChatCompletionInputRequestToolMessageContentPart": {
			"oneOf": [
				{
					"$ref": "#/$defs/ChatCompletionInputRequestMessageContentPartText"
				}
			],
			"x-oaiExpandable": true,
			"title": "ChatCompletionInputRequestToolMessageContentPart"
		},
		"ChatCompletionInputRequestFunctionMessage": {
			"type": "object",
			"title": "ChatCompletionInputRequestFunctionMessage",
			"deprecated": true,
			"properties": {
				"role": {
					"type": "string",
					"enum": ["function"],
					"description": "The role of the messages author, in this case `function`.",
					"x-stainless-const": true
				},
				"content": {
					"nullable": true,
					"type": "string",
					"description": "The contents of the function message."
				},
				"name": {
					"type": "string",
					"description": "The name of the function to call."
				}
			},
			"required": ["role", "content", "name"]
		},
		"ChatCompletionInputModelIdsShared": {
			"example": "gpt-4o",
			"anyOf": [
				{
					"type": "string"
				},
				{
					"type": "string",
					"enum": [
						"o3-mini",
						"o3-mini-2025-01-31",
						"o1",
						"o1-2024-12-17",
						"o1-preview",
						"o1-preview-2024-09-12",
						"o1-mini",
						"o1-mini-2024-09-12",
						"gpt-4o",
						"gpt-4o-2024-11-20",
						"gpt-4o-2024-08-06",
						"gpt-4o-2024-05-13",
						"gpt-4o-audio-preview",
						"gpt-4o-audio-preview-2024-10-01",
						"gpt-4o-audio-preview-2024-12-17",
						"gpt-4o-mini-audio-preview",
						"gpt-4o-mini-audio-preview-2024-12-17",
						"gpt-4o-search-preview",
						"gpt-4o-mini-search-preview",
						"gpt-4o-search-preview-2025-03-11",
						"gpt-4o-mini-search-preview-2025-03-11",
						"chatgpt-4o-latest",
						"gpt-4o-mini",
						"gpt-4o-mini-2024-07-18",
						"gpt-4-turbo",
						"gpt-4-turbo-2024-04-09",
						"gpt-4-0125-preview",
						"gpt-4-turbo-preview",
						"gpt-4-1106-preview",
						"gpt-4-vision-preview",
						"gpt-4",
						"gpt-4-0314",
						"gpt-4-0613",
						"gpt-4-32k",
						"gpt-4-32k-0314",
						"gpt-4-32k-0613",
						"gpt-3.5-turbo",
						"gpt-3.5-turbo-16k",
						"gpt-3.5-turbo-0301",
						"gpt-3.5-turbo-0613",
						"gpt-3.5-turbo-1106",
						"gpt-3.5-turbo-0125",
						"gpt-3.5-turbo-16k-0613"
					]
				}
			],
			"title": "ChatCompletionInputModelIdsShared"
		},
		"ChatCompletionInputResponseModalities": {
			"type": "array",
			"nullable": true,
			"description": "Output types that you would like the model to generate.\nMost models are capable of generating text, which is the default:\n\n`[\"text\"]`\n\nThe `gpt-4o-audio-preview` model can also be used to \n[generate audio](/docs/guides/audio). To request that this model generate \nboth text and audio responses, you can use:\n\n`[\"text\", \"audio\"]`\n",
			"items": {
				"type": "string",
				"enum": ["text", "audio"]
			},
			"title": "ChatCompletionInputResponseModalities"
		},
		"ChatCompletionInputReasoningEffort": {
			"type": "string",
			"enum": ["low", "medium", "high"],
			"default": "medium",
			"nullable": true,
			"description": "**o-series models only** \n\nConstrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n",
			"title": "ChatCompletionInputReasoningEffort"
		},
		"ChatCompletionInputWebSearchLocation": {
			"type": "object",
			"title": "ChatCompletionInputWebSearchLocation",
			"description": "Approximate location parameters for the search.",
			"properties": {
				"country": {
					"type": "string",
					"description": "The two-letter \n[ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,\ne.g. `US`.\n"
				},
				"region": {
					"type": "string",
					"description": "Free text input for the region of the user, e.g. `California`.\n"
				},
				"city": {
					"type": "string",
					"description": "Free text input for the city of the user, e.g. `San Francisco`.\n"
				},
				"timezone": {
					"type": "string",
					"description": "The [IANA timezone](https://timeapi.io/documentation/iana-timezones) \nof the user, e.g. `America/Los_Angeles`.\n"
				}
			}
		},
		"ChatCompletionInputWebSearchContextSize": {
			"type": "string",
			"description": "High level guidance for the amount of context window space to use for the \nsearch. One of `low`, `medium`, or `high`. `medium` is the default.\n",
			"enum": ["low", "medium", "high"],
			"default": "medium",
			"title": "ChatCompletionInputWebSearchContextSize"
		},
		"ChatCompletionInputResponseFormatText": {
			"type": "object",
			"title": "ChatCompletionInputResponseFormatText",
			"description": "Default response format. Used to generate text responses.\n",
			"properties": {
				"type": {
					"type": "string",
					"description": "The type of response format being defined. Always `text`.",
					"enum": ["text"],
					"x-stainless-const": true
				}
			},
			"required": ["type"]
		},
		"ChatCompletionInputResponseFormatJsonSchema": {
			"type": "object",
			"title": "ChatCompletionInputResponseFormatJsonSchema",
			"description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
			"properties": {
				"type": {
					"type": "string",
					"description": "The type of response format being defined. Always `json_schema`.",
					"enum": ["json_schema"],
					"x-stainless-const": true
				},
				"json_schema": {
					"type": "object",
					"title": "JSON schema",
					"description": "Structured Outputs configuration options, including a JSON Schema.\n",
					"properties": {
						"description": {
							"type": "string",
							"description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
						},
						"name": {
							"type": "string",
							"description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
						},
						"schema": {
							"$ref": "#/$defs/ChatCompletionInputResponseFormatJsonSchemaSchema"
						},
						"strict": {
							"type": "boolean",
							"nullable": true,
							"default": false,
							"description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
						}
					},
					"required": ["name"]
				}
			},
			"required": ["type", "json_schema"]
		},
		"ChatCompletionInputResponseFormatJsonSchemaSchema": {
			"type": "object",
			"title": "ChatCompletionInputResponseFormatJsonSchemaSchema",
			"description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n",
			"additionalProperties": true
		},
		"ChatCompletionInputResponseFormatJsonObject": {
			"type": "object",
			"title": "ChatCompletionInputResponseFormatJsonObject",
			"description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
			"properties": {
				"type": {
					"type": "string",
					"description": "The type of response format being defined. Always `json_object`.",
					"enum": ["json_object"],
					"x-stainless-const": true
				}
			},
			"required": ["type"]
		},
		"ChatCompletionInputVoiceIdsShared": {
			"example": "ash",
			"anyOf": [
				{
					"type": "string"
				},
				{
					"type": "string",
					"enum": ["alloy", "ash", "ballad", "coral", "echo", "fable", "onyx", "nova", "sage", "shimmer", "verse"]
				}
			],
			"title": "ChatCompletionInputVoiceIdsShared"
		},
		"ChatCompletionInputStopConfiguration": {
			"description": "Up to 4 sequences where the API will stop generating further tokens. The\nreturned text will not contain the stop sequence.\n",
			"default": null,
			"nullable": true,
			"oneOf": [
				{
					"type": "string",
					"default": "<|endoftext|>",
					"example": "\n",
					"nullable": true
				},
				{
					"type": "array",
					"minItems": 1,
					"maxItems": 4,
					"items": {
						"type": "string",
						"example": "[\"\\n\"]"
					}
				}
			],
			"title": "ChatCompletionInputStopConfiguration"
		},
		"ChatCompletionInputPredictionContent": {
			"type": "object",
			"title": "ChatCompletionInputPredictionContent",
			"description": "Static predicted output content, such as the content of a text file that is\nbeing regenerated.\n",
			"required": ["type", "content"],
			"properties": {
				"type": {
					"type": "string",
					"enum": ["content"],
					"description": "The type of the predicted content you want to provide. This type is\ncurrently always `content`.\n",
					"x-stainless-const": true
				},
				"content": {
					"x-oaiExpandable": true,
					"description": "The content that should be matched when generating a model response.\nIf generated tokens would match this content, the entire model response\ncan be returned much more quickly.\n",
					"oneOf": [
						{
							"type": "string",
							"title": "Text content",
							"description": "The content used for a Predicted Output. This is often the\ntext of a file you are regenerating with minor changes.\n"
						},
						{
							"type": "array",
							"description": "An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text inputs.",
							"title": "Array of content parts",
							"items": {
								"$ref": "#/$defs/ChatCompletionInputRequestMessageContentPartText"
							},
							"minItems": 1
						}
					]
				}
			}
		},
		"ChatCompletionInputStreamOptions": {
			"description": "Options for streaming response. Only set this when you set `stream: true`.\n",
			"type": "object",
			"nullable": true,
			"default": null,
			"properties": {
				"include_usage": {
					"type": "boolean",
					"description": "If set, an additional chunk will be streamed before the `data: [DONE]`\nmessage. The `usage` field on this chunk shows the token usage statistics\nfor the entire request, and the `choices` field will always be an empty\narray. \n\nAll other chunks will also include a `usage` field, but with a null\nvalue. **NOTE:** If the stream is interrupted, you may not receive the\nfinal usage chunk which contains the total token usage for the request.\n"
				}
			},
			"title": "ChatCompletionInputStreamOptions"
		},
		"ChatCompletionInputTool": {
			"type": "object",
			"properties": {
				"type": {
					"type": "string",
					"enum": ["function"],
					"description": "The type of the tool. Currently, only `function` is supported.",
					"x-stainless-const": true
				},
				"function": {
					"$ref": "#/$defs/ChatCompletionInputFunctionObject"
				}
			},
			"required": ["type", "function"],
			"title": "ChatCompletionInputTool"
		},
		"ChatCompletionInputFunctionObject": {
			"type": "object",
			"properties": {
				"description": {
					"type": "string",
					"description": "A description of what the function does, used by the model to choose when and how to call the function."
				},
				"name": {
					"type": "string",
					"description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
				},
				"parameters": {
					"$ref": "#/$defs/ChatCompletionInputFunctionParameters"
				},
				"strict": {
					"type": "boolean",
					"nullable": true,
					"default": false,
					"description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
				}
			},
			"required": ["name"],
			"title": "ChatCompletionInputFunctionObject"
		},
		"ChatCompletionInputFunctionParameters": {
			"type": "object",
			"description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
			"additionalProperties": true,
			"title": "ChatCompletionInputFunctionParameters"
		},
		"ChatCompletionInputToolChoiceOption": {
			"description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tool and instead generates a message.\n`auto` means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools.\nSpecifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.\n",
			"oneOf": [
				{
					"type": "string",
					"description": "`none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.\n",
					"enum": ["none", "auto", "required"]
				},
				{
					"$ref": "#/$defs/ChatCompletionInputNamedToolChoice"
				}
			],
			"x-oaiExpandable": true,
			"title": "ChatCompletionInputToolChoiceOption"
		},
		"ChatCompletionInputNamedToolChoice": {
			"type": "object",
			"description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
			"properties": {
				"type": {
					"type": "string",
					"enum": ["function"],
					"description": "The type of the tool. Currently, only `function` is supported.",
					"x-stainless-const": true
				},
				"function": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string",
							"description": "The name of the function to call."
						}
					},
					"required": ["name"],
					"title": "ChatCompletionInputNamedToolChoiceFunction"
				}
			},
			"required": ["type", "function"],
			"title": "ChatCompletionInputNamedToolChoice"
		},
		"ChatCompletionInputParallelToolCalls": {
			"description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
			"type": "boolean",
			"default": true,
			"title": "ChatCompletionInputParallelToolCalls"
		},
		"ChatCompletionInputFunctionCallOption": {
			"type": "object",
			"description": "Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n",
			"properties": {
				"name": {
					"type": "string",
					"description": "The name of the function to call."
				}
			},
			"required": ["name"],
			"title": "ChatCompletionInputFunctionCallOption"
		},
		"ChatCompletionInputFunctions": {
			"type": "object",
			"deprecated": true,
			"properties": {
				"description": {
					"type": "string",
					"description": "A description of what the function does, used by the model to choose when and how to call the function."
				},
				"name": {
					"type": "string",
					"description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
				},
				"parameters": {
					"$ref": "#/$defs/ChatCompletionInputFunctionParameters"
				}
			},
			"required": ["name"],
			"title": "ChatCompletionInputFunctions"
		}
	}
}
