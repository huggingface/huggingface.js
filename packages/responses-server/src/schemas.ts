import { z } from "zod";

/**
 * https://platform.openai.com/docs/api-reference/responses/create
 * commented out properties are not supported by the server
 */
export const createResponseParamsSchema = z.object({
	// background: z.boolean().default(false),
	// include:
	input: z.union([
		z.string(),
		z.array(
			// z.union([
			z.object({
				content: z.union([
					z.string(),
					z.array(
						z.union([
							z.object({
								type: z.literal("input_text"),
								text: z.string(),
							}),
							z.object({
								type: z.literal("input_image"),
								// file_id: z.string().nullable(),
								image_url: z.string(),
								// detail: z.enum(["auto", "low", "high"]).default("auto"),
							}),
							// z.object({
							// 	type: z.literal("input_file"),
							// 	file_data: z.string().nullable(),
							// 	file_id: z.string().nullable(),
							// 	filename: z.string().nullable(),
							// }),
						])
					),
				]),
				role: z.enum(["user", "assistant", "system", "developer"]),
				type: z.enum(["message"]).default("message"),
			})
			// z.object({}), // An item representing part of the context for the response to be generated by the model
			// z.object({
			// 	id: z.string(),
			// 	type: z.enum(["item_reference"]).default("item_reference"),
			// }),
			// ])
		),
	]),
	instructions: z.string().nullable(),
	// max_output_tokens: z.number().min(0).nullable(),
	// max_tool_calls: z.number().min(0).nullable(),
	// metadata: z.record(z.string().max(64), z.string().max(512)).nullable(), // + 16 items max
	model: z.string(),
	// previous_response_id: z.string().nullable(),
	// reasoning: z.object({
	// 	effort: z.enum(["low", "medium", "high"]).default("medium"),
	// 	summary: z.enum(["auto", "concise", "detailed"]).nullable(),
	// }),
	// store: z.boolean().default(true),
	// stream: z.boolean().default(false),
	temperature: z.number().min(0).max(2).default(1),
	// text:
	// tool_choice:
	// tools:
	// top_logprobs: z.number().min(0).max(20).nullable(),
	top_p: z.number().min(0).max(1).default(1),
	// truncation: z.enum(["auto", "disabled"]).default("disabled"),
	// user
});

export type CreateResponseParams = z.infer<typeof createResponseParamsSchema>;
